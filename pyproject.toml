[project]
name = "my-site-backend"
version = "1.0.0"
description = "My site backend"
authors = [{ name = "Dmitriy Lunev", email = "dima.lunev14@gmail.com" }]
requires-python = ">=3.13"
readme = "README.md"
license = { text = "MIT" }
dependencies = [
    "uvicorn>=0.30.6",
    "pydantic-settings>=2.4.0",
    "psycopg[binary]>=3.2.2",
    "verbose-http-exceptions[litestar]>=3.0.0",
    "python-dateutil>=2.9.0.post0",
    "dishka>=1.5.3",
    "sqlalchemy[asyncio,mypy]>=2.0.40",
    "sqlalchemy-dev-utils>=1.3.1",
    "alembic>=1.15.2",
    "passlib>=1.7.4",
    "pyseto>=1.8.3",
    "bcrypt>=4.3.0",
    "itsdangerous>=2.2.0",
    "structlog>=25.2.0",
    "miniopy-async>=1.22.1",
    "litestar[cli,jinja,pydantic,valkey]>=2.16.0",
    "sqladmin>=0.20.1",
    "starlette>=0.46.2",
    "ecs-logging>=2.2.0",
    "sentry-sdk[litestar]>=2.33.0",
    "pem>=23.1.0",
    "argon2-cffi>=23.1.0",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "coverage>=7.10.6",
    "httpx>=0.28.1",
    "ipython>=9.5.0",
    "mimesis>=18.0.0",
    "mypy>=1.18.1",
    "pytest==8.3.3",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
    "ruff>=0.13.0",
    "setuptools>=80.9.0",
    "vulture>=2.14",
]

[tool.uv]
package = false

[tool.ruff]
output-format = "concise"
lint.select = ["ALL"]
lint.ignore = [
    "RUF003",
    "RUF002",
    "B008",
    "Q000",
    "S101",
    "PT016",
    "ANN101",
    "ANN102",
    "N805",
    "PLC0414",
    "D",
    "ANN10",
    "RUF001",
    "RUF012",
    "FIX",
    "TD002",
    "TD003",
]
line-length = 100
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".eggs",
    "*.egg",
    "dist",
    "tests/fixtures/**",
    "tests/**/snapshots/**",
    "alembic",
    "airich",
]

[tool.ruff.lint.per-file-ignores]
"src/**/*.py" = ["PD"]
"src/tests/**/*.py" = ["S101", "FBT", "ARG002", "PT004", "ANN201", "PLR2004"]
"src/tests/conftest.py" = ["ARG001", "ANN401"]
"src/tests/mocks/**/*.py" = ["ARG002", "ARG003"]
"src/tests/**/helper.py" = ["PLR0913", "ANN401"]
"src/tests/helpers/*.py" = ["PLR0913", "ANN401"]
"src/tests/types.py" = ["ANN"]
"src/app/config/*.py" = ["ANN401"]
"src/api/schemas.py" = ["ARG002", "ANN003", "A003", "ANN401"]
"src/api/*/endpoints.py" = ["ARG001", "PLR0913"]
"src/api/**/*.py" = ["N803"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.mccabe]
max-complexity = 11

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "pydantic.model_validator",
    "pydantic.field_validator",
]

[tool.mypy]
mypy_path = ["src"]
plugins = ["pydantic.mypy"]
follow_imports = "silent"
strict = true
disallow_subclassing_any = false
disallow_any_generics = false
ignore_missing_imports = true
disable_error_code = ["import-untyped"]

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = ["tests.helpers.app"]
warn_return_any = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.black]
line-length = 100
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.coverage]
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "enum.Enum",
    "(Protocol):",
    "(typing.Protocol):",
    "pragma: no cover",
    "pragma: no coverage",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@overload",
    "raise AssertionError",
]
omit = [
    "src/main.py",
    "src/entrypoints/admin/views/**",
    "src/entrypoints/admin/initializers.py",
    "src/entrypoints/admin/registry.py",
    "src/entrypoints/litestar/views/**",
    "src/entrypoints/litestar/cli/**",
    "src/entrypoints/litestar/lifespan.py",
    "src/ioc/prodivers/**",
    "src/ioc/registry.py",
    "src/config/*",
    "src/admin/**",
    "src/db/alembic/**",
    "src/db/meta.py",
]

[tool.pytest]
testpath = "tests"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.behave]
paths = ["src/tests/bdd"]

[tool.bandit]
exclude = ['tests']

[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']
